///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Ragnarok
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The StartController recording.
    /// </summary>
    [TestModule("87c52c91-8e24-495c-9391-f8003554f5c4", ModuleType.Recording, 1)]
    public partial class StartController : ITestModule
    {
        /// <summary>
        /// Holds an instance of the ObjectRepository repository.
        /// </summary>
        public static ObjectRepository repo = ObjectRepository.Instance;

        static StartController instance = new StartController();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public StartController()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static StartController Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Vertex.VertexShellMainForm.Controller' at 115;19.", repo.Vertex.VertexShellMainForm.ControllerInfo, new RecordItemIndex(0));
            repo.Vertex.VertexShellMainForm.Controller.Click("115;19");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Vertex.ControllerSetup.ButtonStartController' at 36;11.", repo.Vertex.ControllerSetup.ButtonStartControllerInfo, new RecordItemIndex(1));
            repo.Vertex.ControllerSetup.ButtonStartController.Click("36;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Vertex.StartingController.ButtonNo' at 29;14.", repo.Vertex.StartingController.ButtonNoInfo, new RecordItemIndex(2));
            repo.Vertex.StartingController.ButtonNo.Click("29;14");
            Delay.Milliseconds(200);
            
            // user code action only has a scope of this module
            //Mouse_Click_ButtonOK(repo.Vertex.StartingController.ControllerButtonOKInfo);
            //Delay.Milliseconds(0);
            
            // user code --> select from library... has global scope
            CustomActions.ClickIfExists(repo.Vertex.StartingController.ControllerButtonOKInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m for the attribute 'Text' to equal the specified value 'Running'. Associated repository item: 'Vertex.VertexShellMainForm.LabelControllerRunning'", repo.Vertex.VertexShellMainForm.LabelControllerRunningInfo, new RecordItemIndex(5));
            repo.Vertex.VertexShellMainForm.LabelControllerRunningInfo.WaitForAttributeEqual(120000, "Text", "Running");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Running') on item 'Vertex.VertexShellMainForm.LabelControllerRunning'.", repo.Vertex.VertexShellMainForm.LabelControllerRunningInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.Vertex.VertexShellMainForm.LabelControllerRunningInfo, "Text", "Running");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Vertex.ControllerSetup.ButtonOk' at Center.", repo.Vertex.ControllerSetup.ButtonOkInfo, new RecordItemIndex(7));
            repo.Vertex.ControllerSetup.ButtonOk.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
